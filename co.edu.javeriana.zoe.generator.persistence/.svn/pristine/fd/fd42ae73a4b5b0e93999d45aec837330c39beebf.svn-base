package co.com.heinsohn.lion.generator.persistence.templates;

import co.com.heinsohn.lion.generator.persistence.templates.ExpressionTemplate;
import co.com.heinsohn.lion.generator.persistence.templates.ReferenceTemplate;
import co.edu.javeriana.isml.isml.Action;
import co.edu.javeriana.isml.isml.Assignment;
import co.edu.javeriana.isml.isml.Attribute;
import co.edu.javeriana.isml.isml.Block;
import co.edu.javeriana.isml.isml.Controller;
import co.edu.javeriana.isml.isml.Expression;
import co.edu.javeriana.isml.isml.For;
import co.edu.javeriana.isml.isml.If;
import co.edu.javeriana.isml.isml.Instance;
import co.edu.javeriana.isml.isml.MethodStatement;
import co.edu.javeriana.isml.isml.NamedElement;
import co.edu.javeriana.isml.isml.Page;
import co.edu.javeriana.isml.isml.Reference;
import co.edu.javeriana.isml.isml.Return;
import co.edu.javeriana.isml.isml.Show;
import co.edu.javeriana.isml.isml.Statement;
import co.edu.javeriana.isml.isml.Type;
import co.edu.javeriana.isml.isml.TypeSpecification;
import co.edu.javeriana.isml.isml.Variable;
import co.edu.javeriana.isml.isml.VariableReference;
import co.edu.javeriana.isml.isml.While;
import co.edu.javeriana.isml.scoping.TypeExtension;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.mwe2.language.scoping.QualifiedNameProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class StatementTemplate {
  @Inject
  @Extension
  private ExpressionTemplate _expressionTemplate;
  
  @Inject
  @Extension
  private TypeExtension _typeExtension;
  
  @Inject
  @Extension
  private QualifiedNameProvider _qualifiedNameProvider;
  
  @Inject
  @Extension
  private ReferenceTemplate _referenceTemplate;
  
  /**
   * Este m√©todo escribe los Statement contenidos en un Body
   */
  public CharSequence writeStatements(final Block body) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Statement> _statements = body.getStatements();
      for(final Statement statement : _statements) {
        CharSequence _writeStatement = this.writeStatement(((MethodStatement) statement));
        _builder.append(_writeStatement, "");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final Reference statement) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _writeReference = this._referenceTemplate.writeReference(statement);
    _builder.append(_writeReference, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final While statement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    Expression _condition = statement.getCondition();
    CharSequence _writeExpression = this._expressionTemplate.writeExpression(_condition);
    _builder.append(_writeExpression, "");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Block _body = statement.getBody();
    CharSequence _writeStatements = this.writeStatements(_body);
    _builder.append(_writeStatements, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final If statement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    Expression _condition = statement.getCondition();
    CharSequence _writeExpression = this._expressionTemplate.writeExpression(_condition);
    _builder.append(_writeExpression, "");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Block _body = statement.getBody();
    CharSequence _writeStatements = this.writeStatements(_body);
    _builder.append(_writeStatements, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    {
      Block _elseBody = statement.getElseBody();
      boolean _notEquals = (!Objects.equal(_elseBody, null));
      if (_notEquals) {
        _builder.append(" else {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Block _elseBody_1 = statement.getElseBody();
        CharSequence _writeStatements_1 = this.writeStatements(_elseBody_1);
        _builder.append(_writeStatements_1, "\t");
        _builder.append("\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
      } else {
        _builder.newLineIfNotEmpty();
        {
          EObject _eContainer = statement.eContainer();
          EObject _eContainer_1 = _eContainer.eContainer();
          if ((_eContainer_1 instanceof Action)) {
            {
              boolean _and = false;
              EObject _eContainer_2 = statement.eContainer();
              if (!(_eContainer_2 instanceof Block)) {
                _and = false;
              } else {
                EObject _eContainer_3 = statement.eContainer();
                EList<Statement> _statements = ((Block) _eContainer_3).getStatements();
                int _size = _statements.size();
                boolean _equals = (_size == 1);
                _and = _equals;
              }
              if (_and) {
                _builder.append("return \"\";");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _writeStatement(final For statement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for (");
    Variable _variable = statement.getVariable();
    Type _type = _variable.getType();
    TypeSpecification _typeSpecification = _type.getTypeSpecification();
    String _typeSpecificationString = this._typeExtension.getTypeSpecificationString(_typeSpecification);
    String _firstUpper = StringExtensions.toFirstUpper(_typeSpecificationString);
    _builder.append(_firstUpper, "");
    _builder.append(" ");
    Variable _variable_1 = statement.getVariable();
    String _name = _variable_1.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append(":");
    Reference _collection = statement.getCollection();
    NamedElement _referencedElement = this._typeExtension.referencedElement(_collection);
    String _name_1 = _referencedElement.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower_1, "");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Block _body = statement.getBody();
    CharSequence _writeStatements = this.writeStatements(_body);
    _builder.append(_writeStatements, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final Variable statement) {
    StringConcatenation _builder = new StringConcatenation();
    Type _type = statement.getType();
    TypeSpecification _typeSpecification = _type.getTypeSpecification();
    String _typeSpecificationString = this._typeExtension.getTypeSpecificationString(_typeSpecification);
    String _firstUpper = StringExtensions.toFirstUpper(_typeSpecificationString);
    _builder.append(_firstUpper, "");
    _builder.append(" ");
    String _name = statement.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    {
      Expression _value = statement.getValue();
      boolean _notEquals = (!Objects.equal(_value, null));
      if (_notEquals) {
        _builder.append("=");
        {
          boolean _and = false;
          List<Object> _evaluateToCast = this._typeExtension.evaluateToCast(statement);
          boolean _isEmpty = _evaluateToCast.isEmpty();
          boolean _not = (!_isEmpty);
          if (!_not) {
            _and = false;
          } else {
            List<Object> _evaluateToCast_1 = this._typeExtension.evaluateToCast(statement);
            Object _get = _evaluateToCast_1.get(0);
            _and = (((Boolean) _get)).booleanValue();
          }
          if (_and) {
            _builder.append("(");
            List<Object> _evaluateToCast_2 = this._typeExtension.evaluateToCast(statement);
            Object _get_1 = _evaluateToCast_2.get(1);
            String _writeType = this._typeExtension.writeType(((Type) _get_1), true);
            _builder.append(_writeType, "");
            _builder.append(")");
          }
        }
        Expression _value_1 = statement.getValue();
        CharSequence _writeExpression = this._expressionTemplate.writeExpression(_value_1);
        _builder.append(_writeExpression, "");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final Show statement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("myController.navegar(\"");
    EObject _findAncestor = this._typeExtension.findAncestor(statement, Controller.class);
    EList<Page> _controlledPages = this._typeExtension.getControlledPages(((Controller) _findAncestor));
    Page _get = _controlledPages.get(0);
    String _name = _get.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("\",\"");
    Expression _expression = statement.getExpression();
    Type _type = ((Instance) _expression).getType();
    TypeSpecification _typeSpecification = _type.getTypeSpecification();
    QualifiedName _fullyQualifiedName = this._qualifiedNameProvider.getFullyQualifiedName(_typeSpecification);
    String _string = _fullyQualifiedName.toString("/");
    _builder.append(_string, "");
    _builder.append("\");\t\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final Return statement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("return ");
    {
      Expression _expression = statement.getExpression();
      boolean _notEquals = (!Objects.equal(_expression, null));
      if (_notEquals) {
        Expression _expression_1 = statement.getExpression();
        CharSequence _writeExpression = this._expressionTemplate.writeExpression(_expression_1);
        _builder.append(_writeExpression, "");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _writeStatement(final Assignment statement) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      boolean _and_1 = false;
      boolean _and_2 = false;
      Expression _left = statement.getLeft();
      if (!(_left instanceof VariableReference)) {
        _and_2 = false;
      } else {
        Expression _left_1 = statement.getLeft();
        Reference _tail = ((VariableReference) _left_1).getTail();
        boolean _notEquals = (!Objects.equal(_tail, null));
        _and_2 = _notEquals;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        Expression _left_2 = statement.getLeft();
        Reference _tail_1 = ((VariableReference) _left_2).getTail();
        NamedElement _referencedElement = this._typeExtension.referencedElement(_tail_1);
        _and_1 = (_referencedElement instanceof Attribute);
      }
      if (!_and_1) {
        _and = false;
      } else {
        Expression _right = statement.getRight();
        boolean _notEquals_1 = (!Objects.equal(_right, null));
        _and = _notEquals_1;
      }
      if (_and) {
        Expression _left_3 = statement.getLeft();
        CharSequence _writeExpression = this._expressionTemplate.writeExpression(_left_3);
        _builder.append(_writeExpression, "");
        _builder.append(" ( ");
        {
          boolean _and_3 = false;
          List<Object> _evaluateToCast = this._typeExtension.evaluateToCast(statement);
          boolean _isEmpty = _evaluateToCast.isEmpty();
          boolean _not = (!_isEmpty);
          if (!_not) {
            _and_3 = false;
          } else {
            List<Object> _evaluateToCast_1 = this._typeExtension.evaluateToCast(statement);
            Object _get = _evaluateToCast_1.get(0);
            _and_3 = (((Boolean) _get)).booleanValue();
          }
          if (_and_3) {
            _builder.append("(");
            List<Object> _evaluateToCast_2 = this._typeExtension.evaluateToCast(statement);
            Object _get_1 = _evaluateToCast_2.get(1);
            String _writeType = this._typeExtension.writeType(((Type) _get_1), true);
            _builder.append(_writeType, "");
            _builder.append(")");
          }
        }
        Expression _right_1 = statement.getRight();
        CharSequence _writeExpression_1 = this._expressionTemplate.writeExpression(_right_1);
        _builder.append(_writeExpression_1, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        Expression _left_4 = statement.getLeft();
        CharSequence _writeExpression_2 = this._expressionTemplate.writeExpression(_left_4);
        _builder.append(_writeExpression_2, "");
        _builder.append(" ");
        String _symbol = statement.getSymbol();
        _builder.append(_symbol, "");
        _builder.append(" ");
        Expression _right_2 = statement.getRight();
        CharSequence _writeExpression_3 = this._expressionTemplate.writeExpression(_right_2);
        _builder.append(_writeExpression_3, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence writeStatement(final MethodStatement statement) {
    if (statement instanceof Variable) {
      return _writeStatement((Variable)statement);
    } else if (statement instanceof Assignment) {
      return _writeStatement((Assignment)statement);
    } else if (statement instanceof For) {
      return _writeStatement((For)statement);
    } else if (statement instanceof If) {
      return _writeStatement((If)statement);
    } else if (statement instanceof Reference) {
      return _writeStatement((Reference)statement);
    } else if (statement instanceof Return) {
      return _writeStatement((Return)statement);
    } else if (statement instanceof Show) {
      return _writeStatement((Show)statement);
    } else if (statement instanceof While) {
      return _writeStatement((While)statement);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(statement).toString());
    }
  }
}
