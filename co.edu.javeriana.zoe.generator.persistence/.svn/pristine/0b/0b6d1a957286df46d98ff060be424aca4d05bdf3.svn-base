package co.com.heinsohn.lion.generator.persistence.templates;

import co.edu.javeriana.isml.generator.common.SimpleTemplate;
import co.edu.javeriana.isml.isml.EnumItem;
import co.edu.javeriana.isml.isml.Feature;
import co.edu.javeriana.isml.scoping.TypeExtension;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class EnumTemplate extends SimpleTemplate<co.edu.javeriana.isml.isml.Enum> {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private TypeExtension _typeExtension;
  
  public void preprocess(final co.edu.javeriana.isml.isml.Enum service) {
  }
  
  /**
   * @«constraint.type.classifier.name»(«FOR Expression ex : constraint.parameters SEPARATOR ","»«ex.toString.length»«ENDFOR»)
   */
  public CharSequence template(final co.edu.javeriana.isml.isml.Enum enumeration) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = enumeration.eContainer();
    QualifiedName _fullyQualifiedName = null;
    if (_eContainer!=null) {
      _fullyQualifiedName=this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    }
    QualifiedName _lowerCase = _fullyQualifiedName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(";\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This represents an enumeration Object named ");
    String _name = enumeration.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public enum ");
    String _name_1 = enumeration.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<Feature> _features = this._typeExtension.getFeatures(enumeration);
      boolean _hasElements = false;
      for(final Feature attr : _features) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        {
          if ((attr instanceof EnumItem)) {
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("* This is the ");
            String _name_2 = ((EnumItem)attr).getName();
            String _upperCase = _name_2.toUpperCase();
            _builder.append(_upperCase, "\t ");
            _builder.append(" value for the ");
            String _name_3 = enumeration.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
            _builder.append(_firstUpper_2, "\t ");
            _builder.append(" enumeration");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append("\t");
            String _name_4 = ((EnumItem)attr).getName();
            String _upperCase_1 = _name_4.toUpperCase();
            _builder.append(_upperCase_1, "\t");
            _builder.append("(\"");
            String _name_5 = ((EnumItem)attr).getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_5);
            _builder.append(_firstUpper_3, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This is the label for each enumeration\'s value");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String enumItemLabel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Default enumeration Constructor method");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_6 = enumeration.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_4, "\t");
    _builder.append("(String enumItemLabel){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.setEnumItemLabel(enumItemLabel);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Returns the current value of the enumItemLabel attribute");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getEnumItemLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return enumItemLabel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Sets the value of the enumItemLabel attribute");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void setEnumItemLabel(String enumItemLabel){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.enumItemLabel=enumItemLabel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
